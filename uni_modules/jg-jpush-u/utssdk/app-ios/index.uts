import { Data } from 'Assignables';
import { App } from 'MarketplaceKit';
import { Notification } from 'Foundation';
import { Dictionary, Set, Error} from 'Swift';
import { NSError } from 'Foundation';
import { NSSet } from 'Foundation';
import { UIDevice } from 'UIKit';
import { ATTrackingManager, ATTrackingManagerAuthorizationStatus } from 'AppTrackingTransparency';
import { ASIdentifierManager } from 'AdSupport';
import { NotificationCenter } from 'Foundation';
import { Selector } from 'Foundation';

/**
 * iOS UTS插件实现 - 极光推送
 * 对应AppDelegate.m的功能
 */
export class JGPushIOSPlugin implements UTSiOSHookProxy {
    
    // MARK: - 应用程序生命周期回调
    
    /**
     * UTS插件创建时的回调
     */
    override onCreate(): void {
        console.log("JGPushIOSPlugin onCreate")
    }
    
    /**
     * 应用正常启动时的回调
     * 极光推送初始化
     */
    applicationDidFinishLaunchingWithOptions(application: UIApplication | null, launchOptions: Map<UIApplication.LaunchOptionsKey, any> | null = null): boolean {
        console.log("JGPushIOSPlugin applicationDidFinishLaunchingWithOptions")
        // 保存启动选项供后续使用
        JGPushTool.launchOptions = launchOptions
        return true
    }
    
    /**
     * 远程通知注册成功时的回调
     * 极光推送：将deviceToken发送给服务端
     */
    didRegisterForRemoteNotifications(deviceToken: Data | null) {
        console.log("JGPushIOSPlugin didRegisterForRemoteNotifications")
        JGPushTool.registerDeviceToken(deviceToken)
    }
    
    /**
     * 远程通知注册失败时的回调
     */
    didFailToRegisterForRemoteNotifications(error: NSError | null) {       
        console.log("JGPushIOSPlugin didFailToRegisterForRemoteNotifications", error)
    }
    
    /**
     * 收到远程通知时的回调
     */
    didReceiveRemoteNotification(userInfo: Map<AnyHashable, any> | null) {
        console.log("JGPushIOSPlugin didReceiveRemoteNotification", userInfo)
    }
}

/**
 * 极光推送模块实现
 */
class JGPushModule implements JPUSHRegisterDelegate {
    
    eventCallBack: EventCallBackParams | null = null
    launchOptions: Map<UIApplication.LaunchOptionsKey, any> | null = null
    
    /**
     * 初始化极光推送
     */
    initPush(param: InitPushParams) {
        // 创建推送注册实体
        const entity = JPUSHRegisterEntity.alloc().init()
        entity.types = JPAuthorizationOptionAlert | JPAuthorizationOptionBadge | JPAuthorizationOptionSound | JPAuthorizationOptionProvidesAppNotificationSettings
        
        // 注册远程通知配置
        JPUSHService.registerForRemoteNotificationConfig(entity, delegate: this)
        
        // 添加通知监听
        const method = Selector("didReceiveCustomMessage:")
        NotificationCenter.default.addObserver(this, selector: method, name: NSNotification.Name.kJPFNetworkDidReceiveMessageNotification, object: null)
        
        const method1 = Selector("networkDidLogin:")
        NotificationCenter.default.addObserver(this, selector: method1, name: NSNotification.Name.kJPFNetworkDidLoginNotification, object: null)
        
        const method2 = Selector("networkDidClose:")
        NotificationCenter.default.addObserver(this, selector: method2, name: NSNotification.Name.kJPFNetworkDidCloseNotification, object: null)
        
        // 获取广告标识符（IDFA）
        let advertisingId: string = ""
        
        if (UIDevice.currentDevice.systemVersion.floatValue >= 14.0) {
            ATTrackingManager.requestTrackingAuthorization { status in
                if status == ATTrackingManagerAuthorizationStatusAuthorized {
                    advertisingId = ASIdentifierManager.sharedManager.advertisingIdentifier.UUIDString
                }
            }
        } else {
            advertisingId = ASIdentifierManager.sharedManager.advertisingIdentifier.UUIDString
        }
        
        // 初始化极光推送服务
        JPUSHService.setupWithOption(this.launchOptions, 
                                   appKey: param.appkey,
                                   channel: param.channel,
                                   apsForProduction: param.isProduction,
                                   advertisingIdentifier: advertisingId)
        
        console.log("极光推送SDK初始化完成")
    }
    
    /**
     * 注册设备令牌
     */
    registerDeviceToken(token: Data | null) {
        JPUSHService.registerDeviceToken(token)
    }
    
    /**
     * 收到自定义消息回调
     */
    @objc didReceiveCustomMessage(notification: Notification) {
        const userInfo = notification.userInfo
        
        const callback: EventCallBack = new EventCallBack()
        callback.eventName = "onCustomMessage"
        callback.eventData = userInfo as Dictionary<String, Any>
        this.eventCallBack?.callback?.(callback)
    }
    
    /**
     * 网络连接成功回调
     */
    @objc networkDidLogin(notification: Notification) {
        const map: Map<string, any> = new Map()
        map.set('enable', true)
        
        const callback: EventCallBack = {
            eventName: "onConnectStatus",
            eventData: map
        }
        this.eventCallBack?.callback?.(callback)
    }
    
    /**
     * 网络连接关闭回调
     */
    @objc networkDidClose(notification: Notification) {
        const map: Map<string, any> = new Map()
        map.set('enable', false)
        
        const callback: EventCallBack = {
            eventName: "onConnectStatus",
            eventData: map
        }
        this.eventCallBack?.callback?.(callback)
    }
    
    /**
     * 通知授权状态回调
     */
    jpushNotificationAuthorization(status: JPushAuthorizationStatus, withInfo: Map<AnyHashable, any>) {
        const map: Map<string, any> = new Map()
        if (status == JPushAuthorizationStatus.statusAuthorized) {
            map.set('enable', true)
        } else {
            map.set('enable', false)
        }
        
        const callback: EventCallBack = new EventCallBack()
        callback.eventName = "onNotificationStatus"
        callback.eventData = map
        this.eventCallBack?.callback?.(callback)
    }
    
    /**
     * 通知到达回调
     */
    jpushNotificationCenter(center: UNUserNotificationCenter, willPresent: UNNotification, withCompletionHandler: (code: Int) => Void) {
        console.log("willPresent notification")
        const userInfo = willPresent.request.content.userInfo
        
        if ((willPresent.request.trigger?.isKind(of: UNPushNotificationTrigger.self)) != nil) {
            JPUSHService.handleRemoteNotification(userInfo)
        }
        
        const callback: EventCallBack = new EventCallBack()
        callback.eventName = "onNotificationArrived"
        callback.eventData = userInfo as Dictionary<String, Any>
        this.eventCallBack?.callback?.(callback)
        
        completionHandler(NSInteger(UNNotificationPresentationOptions.alert.rawValue) |
                             NSInteger(UNNotificationPresentationOptions.sound.rawValue) |
                             NSInteger(UNNotificationPresentationOptions.badge.rawValue))
    }
    
    /**
     * 通知点击回调
     */
    jpushNotificationCenter(center: UNUserNotificationCenter, didReceive: UNNotificationResponse, withCompletionHandler: () => Void) {
        console.log("didReceiveResponse notification")
        const userInfo = didReceive.notification.request.content.userInfo
        
        if ((didReceive.notification.request.trigger?.isKind(of: UNPushNotificationTrigger.self)) != nil) {
            JPUSHService.handleRemoteNotification(userInfo)
        }
        
        const callback: EventCallBack = new EventCallBack()
        callback.eventName = "onNotificationClicked"
        callback.eventData = userInfo as Dictionary<String, Any>
        this.eventCallBack?.callback?.(callback)
        
        completionHandler()
    }
	
	jpushNotificationCenter(center: UNUserNotificationCenter, @argumentLabel("openSettingsFor") notification: UNNotification) {
	}
}

// 全局极光推送工具实例
const JGPushTool: JGPushModule = new JGPushModule()

// MARK: - 导出函数


/**
 * 添加事件回调
 */
@UTSJS.keepAlive
export function setEventCallBack(param: EventCallBackParams): void {
    JGPushTool.eventCallBack = param
}



