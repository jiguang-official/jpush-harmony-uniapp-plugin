/**
 * PushMessageReceiver.uts
 * 极光推送消息接收器，继承自JPushMessageReceiver
 */

import  Context  from 'android.content.Context';
import  Intent  from 'android.content.Intent';
import  Log  from 'android.util.Log';

import CmdMessage from 'cn.jpush.android.api.CmdMessage';
import CustomMessage from 'cn.jpush.android.api.CustomMessage';
import JPushMessage from 'cn.jpush.android.api.JPushMessage';
import NotificationMessage from 'cn.jpush.android.api.NotificationMessage';
import JPushMessageReceiver  from 'cn.jpush.android.service.JPushMessageReceiver';

/**
 * 推送消息接收器类
 * 继承自极光推送的JPushMessageReceiver
 */
export class PushMessageReceiver extends JPushMessageReceiver {
    private static readonly TAG: string = "U-PushMessageReceiver";

    constructor() {
        super();
        Log.e(PushMessageReceiver.TAG, "PushMessageReceiver constructor called");
    }

    /**
     * 收到自定义消息
     */
    override onMessage(context: Context, customMessage: CustomMessage): void {
        super.onMessage(context, customMessage);
        Log.e(PushMessageReceiver.TAG, "[onMessage] " + customMessage.toString());
    }

    /**
     * 属性操作结果回调
     */
    override onPropertyOperatorResult(context: Context, jPushMessage: JPushMessage): void {
        super.onPropertyOperatorResult(context, jPushMessage);
        Log.e(PushMessageReceiver.TAG, "[onPropertyOperatorResult] " + jPushMessage.toString());
    }

    /**
     * 通知点击回调
     */
    override onNotifyMessageOpened(context: Context, message: NotificationMessage): void {
        Log.e(PushMessageReceiver.TAG, "[onNotifyMessageOpened] " + message.toString());
        super.onNotifyMessageOpened(context, message);
    }

    /**
     * 通知展示回调
     */
    override onNotifyMessageArrived(context: Context, message: NotificationMessage): void {
        Log.e(PushMessageReceiver.TAG, "[onNotifyMessageArrived] " + message.toString());
        super.onNotifyMessageArrived(context, message);
    }

    /**
     * 通知被清除回调
     */
    override onNotifyMessageDismiss(context: Context, message: NotificationMessage): void {
        super.onNotifyMessageDismiss(context, message);
        Log.e(PushMessageReceiver.TAG, "[onNotifyMessageDismiss] " + message.toString());
    }

    /**
     * 注册ID回调
     */
    override onRegister(context: Context, registrationId: string): void {
        super.onRegister(context, registrationId);
        Log.e(PushMessageReceiver.TAG, "[onRegister] " + registrationId);
    }

    /**
     * 连接状态回调
     */
    override onConnected(context: Context, isConnected: boolean): void {
        super.onConnected(context, isConnected);
        Log.e(PushMessageReceiver.TAG, "[onConnected] " + isConnected);
    }

    /**
     * 命令结果回调
     */
    override onCommandResult(context: Context, cmdMessage: CmdMessage): void {
        super.onCommandResult(context, cmdMessage);
        Log.e(PushMessageReceiver.TAG, "[onCommandResult] " + cmdMessage.toString());
    }

    /**
     * 标签操作结果回调
     */
    override onTagOperatorResult(context: Context, jPushMessage: JPushMessage): void {
        Log.e(PushMessageReceiver.TAG, "[onTagOperatorResult] " + jPushMessage.toString());
        // TagAliasOperatorHelper.getInstance().onTagOperatorResult(context, jPushMessage);
        super.onTagOperatorResult(context, jPushMessage);
    }

    /**
     * 检查标签操作结果回调
     */
    override onCheckTagOperatorResult(context: Context, jPushMessage: JPushMessage): void {
        Log.e(PushMessageReceiver.TAG, "[onCheckTagOperatorResult] " + jPushMessage.toString());
        // TagAliasOperatorHelper.getInstance().onCheckTagOperatorResult(context, jPushMessage);
        super.onCheckTagOperatorResult(context, jPushMessage);
    }

    /**
     * 别名操作结果回调
     */
    override onAliasOperatorResult(context: Context, jPushMessage: JPushMessage): void {
        Log.e(PushMessageReceiver.TAG, "[onAliasOperatorResult] " + jPushMessage.toString());
        // TagAliasOperatorHelper.getInstance().onAliasOperatorResult(context, jPushMessage);
        super.onAliasOperatorResult(context, jPushMessage);
    }

    /**
     * 手机号操作结果回调
     */
    override onMobileNumberOperatorResult(context: Context, jPushMessage: JPushMessage): void {
        super.onMobileNumberOperatorResult(context, jPushMessage);
        Log.e(PushMessageReceiver.TAG, "[onMobileNumberOperatorResult] " + jPushMessage.toString());
        // TagAliasOperatorHelper.getInstance().onMobileNumberOperatorResult(context, jPushMessage);
    }

    /**
     * 通知设置检查回调
     */
    override onNotificationSettingsCheck(context: Context, isOn: boolean, source: number): void {
        super.onNotificationSettingsCheck(context, isOn, source);
        Log.e(PushMessageReceiver.TAG, "[onNotificationSettingsCheck] isOn:" + isOn + ",source:" + source);
    }

    /**
     * 是否需要显示通知
     */
    override isNeedShowNotification(context: Context, notificationMessage: NotificationMessage, processName: string): boolean {
        return false;
    }

    /**
     * 通知未显示回调
     */
    override onNotifyMessageUnShow(context: Context, message: NotificationMessage): void {
        super.onNotifyMessageUnShow(context, message);
        Log.e(PushMessageReceiver.TAG, "[onNotifyMessageUnShow] message:" + message.toString());
    }

    /**
     * 应用内消息展示回调
     */
    override onInAppMessageShow(context: Context, message: NotificationMessage): void {
        super.onInAppMessageShow(context, message);
        Log.e(PushMessageReceiver.TAG, "[onInAppMessageShow], " + message.toString());
    }

    /**
     * 应用内消息点击回调
     */
    override onInAppMessageClick(context: Context, message: NotificationMessage): void {
        super.onInAppMessageClick(context, message);
        Log.e(PushMessageReceiver.TAG, "[onInAppMessageClick], " + message.toString());
    }

    /**
     * 拉取地理围栏列表的回调
     */
    override onGeofenceReceived(context: Context, geofences: string): void {
        super.onGeofenceReceived(context, geofences);
        Log.e(PushMessageReceiver.TAG, "onGeofenceReceived: " + geofences);
    }

    /**
     * 多操作按钮点击回调
     */
    override onMultiActionClicked(context: Context, intent: Intent): void {
        super.onMultiActionClicked(context, intent);
        Log.e(PushMessageReceiver.TAG, "[onMultiActionClicked] 用户点击了通知栏按钮");
    }

    /**
     * 触发地理围栏回调
     */
    override onGeofenceRegion(context: Context, geofence: string, longitude: number, latitude: number): void {
        super.onGeofenceRegion(context, geofence, longitude, latitude);
        Log.e(PushMessageReceiver.TAG, "onGeofenceRegion: " + geofence);
    }
} 