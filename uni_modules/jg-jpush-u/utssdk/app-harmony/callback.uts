

/* 引入 interface.uts 文件中定义的变量 */

import { EventCallBackParams, EventCallBack } from '../interface.uts';


import {
	CallBackMsg,
	JAliasMessage,
	JCmdMessage,
	JCustomMessage,
	JMessage,
	JMessageExtra,
	JMessageVoIP,
	JMobileNumberMessage,
	JTagMessage} from '@jg/push';

const TAG = "JPUSH-uni-CallBackMsg-"

export class CallBackMsgUni extends CallBackMsg {

	callback : EventCallBackParams

	constructor(co : EventCallBackParams) {
		super();
		this.callback = co
	}

	/**
	 * 注册成功后回调rid
	 * @param registrationId 注册成功后回调rid
	 */
	onRegister(registrationId : string) : void {
		console.log(TAG, 'onRegister registrationId:' + registrationId);
		let v : EventCallBack = { "eventName": "onRegister", "eventData": registrationId };
		this.callback.callback?.(v);
	}

	/**
	 * 长连接登陆 回调
	 * @param isConnected true:成功，false：失败
	 */
	onConnected(isConnected : boolean) : void {
		console.log(TAG, 'onConnected isConnected:' + isConnected);
		let v : EventCallBack = { "eventName": "onConnected", "eventData": isConnected + "" };
		this.callback.callback?.(v);
	}

	/**
	 * 操作 tag 接口回调
	 * @param jTagMessage
	 * export class JTagMessage {
	 * sequence?: number //对应操作id，全局不要重复
	 * code?: number //0成功，JTagMessage.CODE_TIME_OUT超时
	 * op?: string
	 * tags?: string[] //对应数据
	 * curr?: number //数据当前页数，页数从1开始
	 * total?: number //数据总页数
	 * msg?: string
	 * }
	 */
	onTagOperatorResult(jTagMessage : JTagMessage) : void {
		console.log(TAG, 'onTagOperatorResult JTagMessage:' + JSON.stringify(jTagMessage));

		let v : EventCallBack = { "eventName": "onTagOperatorResult", "eventData": JSON.stringify(jTagMessage) };
		this.callback.callback?.(v);
	}
	/**
	 * 操作 Alias 接口回调
	 * @param jAliasMessage
	 * export class JAliasMessage {
	 * sequence?: number //对应操作id，全局不要重复
	 * code?: number //0成功，JAliasMessage.CODE_TIME_OUT超时
	 * op?: string
	 * alias?: string //对应数据
	 * curr?: number
	 * total?: number
	 * msg?: string
	 * }
	 */
	onAliasOperatorResult(jAliasMessage : JAliasMessage) : void {
		console.log(TAG, 'onAliasOperatorResult jAliasMessage:' + JSON.stringify(jAliasMessage));
		let v : EventCallBack = { "eventName": "onAliasOperatorResult", "eventData": JSON.stringify(jAliasMessage) };
		this.callback.callback?.(v);
	}

	onMobileNumberOperatorResult(jMobileNumberMessage : JMobileNumberMessage) {
		console.log(TAG, 'onMobileNumberOperatorResult jMobileNumberMessage:' + JSON.stringify(jMobileNumberMessage));
		let v : EventCallBack = { "eventName": "onMobileNumberOperatorResult", "eventData": JSON.stringify(jMobileNumberMessage) };
		this.callback.callback?.(v);
	}
	/**
	 * 通知点击事件回调
	 * @param jMessage
	 *
	 * export class JMessage {
	 * msgId?: string //通知id
	 * title?: string //通知标题
	 * content?: string//通知内容
	 * extras?: string//自定义数据
	 * }
	 */
	onClickMessage(jMessage : JMessage) {
		console.log(TAG, 'onClickMessage jMessage:' + JSON.stringify(jMessage));
		let v : EventCallBack = { "eventName": "onClickMessage", "eventData": JSON.stringify(jMessage) };
		this.callback.callback?.(v);
	}

	/**
	 * 自定义信息通知回调
	 *  回调一：冷启动调用sdk初始化后回调之前还没有回调的信息
	 *  回调二：app存活时会直接回调信息
	 * @param jCustomMessage
	 *
	 * export class JCustomMessage {
	 *  msgId?: string //通知id
	 *  title?: string //通知标题
	 *  content?: string //通知内容
	 *  contentType?: string //通知内容类型
	 *  extras?: Record<string, Object> //通知自定义键值对
	 *  ttl?: number //后台下发的信息过期时间，单位秒
	 *  stime?: number //后台下发时间，毫秒
	 * }
	 */
	onCustomMessage(jCustomMessage : JCustomMessage) {
		console.log(TAG, 'onCustomMessage jCustomMessage:' + JSON.stringify(jCustomMessage));
		let v : EventCallBack = { "eventName": "onCustomMessage", "eventData": JSON.stringify(jCustomMessage) };
		this.callback.callback?.(v);
	}
	/**
	 * 通知扩展消息回调
	 * @param jMessageExtra
	 *
	 * export class JMessageExtra {
	 * msgId?: string //通知id
	 * title?: string //通知标题
	 * content?: string//通知内容
	 * extras?: Record<string, Object>//自定义数据
	 * extraData?: string//通知扩展消息的自定义数据
	 * }
	 */
	onJMessageExtra(jme : JMessageExtra) {
		console.log(TAG, 'onJMessageExtra jme:' + JSON.stringify(jme));
		let v : EventCallBack = { "eventName": "onJMessageExtra", "eventData": JSON.stringify(jme) };
		this.callback.callback?.(v);
	}

	/**
	 * VoIP呼叫消息回调
	 * export class JMessageVoIP {
	 * msgId?: string //通知id
	 * extraData?: string //VoIP自定义数据
	 }
	 * @param jmVoIP
	 */
	onJMessageVoIP(jmVoIP : JMessageVoIP) {
		console.log(TAG, 'JMessageVoIP jmVoIP:' + JSON.stringify(jmVoIP));
		let v : EventCallBack = { "eventName": "onJMessageVoIP", "eventData": JSON.stringify(jmVoIP) };
		this.callback.callback?.(v);
	}

	/**
	 * 交互事件回调
	 * @param cmdMessage
	 * export class JCmdMessage {
	 * public static CMD_PUSH_STOP = 2007 //通知停止 设置回调
	 * public static CMD_PUSH_RESUME = 2006 //	通知恢复 设置回调
	 *
	 * cmd?: number  //操作事件，2007通知停止，2006恢复通知
	 * errorCode?: number //0表示成功，其他为错误
	 * msg?: string //内容信息
	 * extra?: Record<string, Object>˚
	 * }
	 */
	onCommandResult(cmdMessage : JCmdMessage) {
		console.log(TAG, 'onCommandResult cmdMessage:' + JSON.stringify(cmdMessage));
		let v : EventCallBack = { "eventName": "onCommandResult", "eventData": JSON.stringify(cmdMessage) };
		this.callback.callback?.(v);
	}

}