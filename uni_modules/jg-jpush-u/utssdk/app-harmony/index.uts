

/* 引入 interface.uts 文件中定义的变量 */
import { EventCallBackParams } from '../interface.uts';

/* 引入 unierror.uts 文件中定义的变量 */



import { CallBackMsgUni } from './callback.uts';



import { common, Want, AbilityConstant } from '@kit.AbilityKit';
import { pushCommon, RemoteNotificationExtensionAbility } from '@kit.PushKit';

import {
	JMessage,
	JMessageExtra,
	JPushInterface,
	JCollectControl
} from '@jg/push';

const TAG = "JPUSH-uni-"
let APP_KEY : string | undefined = undefined
let MY_WANT : Want | undefined = undefined

// 获取应用上下文
function getContext() : common.ApplicationContext {
	return UTSHarmony.getUIAbilityContext().getApplicationContext()
}

UTSHarmony.onAppAbilityCreate((want : Want, launchParam : AbilityConstant.LaunchParam) => {
	console.log(TAG, "onAppAbilityCreate")
	if (undefined === APP_KEY) {
		MY_WANT = want
	} 
	JPushInterface.setClickWant(want);
	
})

UTSHarmony.onAppAbilityNewWant((want : Want, launchParam : AbilityConstant.LaunchParam) => {
	console.log(TAG, "onAppAbilityNewWant")
	if (undefined === APP_KEY) {
		MY_WANT = want
	}
	JPushInterface.setClickWant(want);
	
})



export function setEventCallBack(param : EventCallBackParams) : void {
	console.log(TAG, "setEventCallBack");
	JPushInterface.setCallBackMsg(new CallBackMsgUni(param));
}


export const setDebug = function (b : boolean) : void {
	console.log(TAG, "setDebug:" + b)
	JPushInterface.setDebug(b)
}

// 设置长连接心跳周期
export const setHeartbeatTime = function (heartbeatTime : number) : void {
	console.log(TAG, "setHeartbeatTime:" + heartbeatTime)
	JPushInterface.setHeartbeatTime(heartbeatTime)
}

export const setAppKey = function (appKey : string) {
	console.log(TAG, "setAppKey")
	JPushInterface.setAppKey(appKey)
	APP_KEY = appKey
	if (undefined !== MY_WANT) {
		JPushInterface.setClickWant(MY_WANT);
		MY_WANT = undefined
	}
}
export const setChannel = function (channel : string) {
	JPushInterface.setChannel(channel)
}

// 配置用户通知权限申请方式
export const setUserRequestNotificationPermission = function (enable : boolean) : void {
	console.log(TAG, "setUserRequestNotificationPermission:" + enable)
	JPushInterface.setUserRequestNotificationPermission(enable)
}

// 设置用户分群推送开关
export const setSmartPushEnable = function (enable : boolean) : void {
	console.log(TAG, "setSmartPushEnable:" + enable)
	const context = getContext()
	JPushInterface.setSmartPushEnable(context, enable)
}

// 设置用户洞察开关
export const setDataInsightsEnable = function (enable : boolean) : void {
	console.log(TAG, "setDataInsightsEnable:" + enable)
	const context = getContext()
	JPushInterface.setDataInsightsEnable(context, enable)
}

export const init = function (context : common.UIAbilityContext | common.AbilityStageContext | undefined) {
	if (undefined === context) {
		context = UTSHarmony.getUIAbilityContext()
	}
	console.log(TAG, "init")
	JPushInterface.init(context)
}

export const getRegistrationId = function () : string {
	return JPushInterface.getRegistrationId();
}

export const setCustomMessageMaxCacheCount = function (maxCacheCount : number) {
	JPushInterface.setCustomMessageMaxCacheCount(maxCacheCount)
}


export const stopPush = function () {
	JPushInterface.stopPush();
}


export const resumePush = function () {
	JPushInterface.resumePush();
}

export const isPushStopped = function () : boolean | undefined {
	return JPushInterface.isPushStopped();
}


export const addTags = function (sequence : number, tags : string[]) {
	JPushInterface.addTags(sequence, tags);
}

export const deleteTags = function (sequence : number, tags : string[]) {
	JPushInterface.deleteTags(sequence, tags);
}
export const setTags = function (sequence : number, tags : string[]) {
	JPushInterface.setTags(sequence, tags);
}
export const checkTagBindState = function (sequence : number, tag : string) {
	JPushInterface.checkTagBindState(sequence, tag);
}
export const cleanTags = function (sequence : number) {
	JPushInterface.cleanTags(sequence);
}
export const getTags = function (sequence : number, curr : number) {
	JPushInterface.getTags(sequence, curr);
}
export const setAlias = function (sequence : number, alias : string) {
	JPushInterface.setAlias(sequence, alias);
}
export const getAlias = function (sequence : number) {
	JPushInterface.getAlias(sequence);
}
export const deleteAlias = function (sequence : number) {
	JPushInterface.deleteAlias(sequence);
}
export const setMobileNumber = function (sequence : number, mobileNumber : string) {
	JPushInterface.setMobileNumber(sequence, mobileNumber);
}
export const setBadgeNumber = function (badgeNumber : number) {
	JPushInterface.setBadgeNumber(badgeNumber);
}


export const setClickWant = function (want : Want) : Promise<JMessage | undefined> {
	return JPushInterface.setClickWant(want);
}


export const customMessageBackgroundData = function (data : pushCommon.PushPayload) : Promise<boolean> {
	return JPushInterface.customMessageBackgroundData(data);
}
export const voIPMessageBackgroundData = function (data : pushCommon.PushPayload) : Promise<boolean> {
	return JPushInterface.voIPMessageBackgroundData(data);
}
export const extraMessageBackgroundData = function (data : pushCommon.PushPayload) : Promise<boolean> {
	return JPushInterface.extraMessageBackgroundData(data);
}
export const receiveExtraDataMessage = function (rNEAbility : RemoteNotificationExtensionAbility, remoteNotificationInfo : pushCommon.RemoteNotificationInfo) : Promise<JMessageExtra | undefined> {
	return JPushInterface.receiveExtraDataMessage(rNEAbility, remoteNotificationInfo);
}

// 默认消息后台数据接收
export const defaultMessageBackgroundData = function (data : pushCommon.PushPayload) : Promise<boolean> {
	return JPushInterface.defaultMessageBackgroundData(data);
}

// 清除指定通知
export const clearNotificationById = function (id : number) : void {
	console.log(TAG, "clearNotificationById:" + id)
	JPushInterface.clearNotification(id)
}

// 通过消息ID清除通知
export const clearNotificationByMsgId = function (msgId : string) : void {
	console.log(TAG, "clearNotificationByMsgId:" + msgId)
	JPushInterface.clearNotificationByMsgId(msgId)
}

// 清除所有通知
export const clearNotificationAll = function () : void {
	console.log(TAG, "clearNotificationAll")
	JPushInterface.clearNotificationAll()
}

// 上报自定义消息展示
export const reportCustomDisplay = function (channel : number, msgId : string) : void {
	console.log(TAG, "reportCustomDisplay channel:" + channel + " msgId:" + msgId)
	JPushInterface.reportCustomDisplay(channel, msgId)
}

// 上报自定义消息点击
export const reportCustomClick = function (channel : number, msgId : string) : void {
	console.log(TAG, "reportCustomClick channel:" + channel + " msgId:" + msgId)
	JPushInterface.reportCustomClick(channel, msgId)
}

// 上报通知展示
export const reportNotificationDisplay = function (channel : number, msgId : string) : void {
	console.log(TAG, "reportNotificationDisplay channel:" + channel + " msgId:" + msgId)
	JPushInterface.reportNotificationDisplay(channel, msgId)
}

// 上报通知点击
export const reportNotificationClick = function (channel : number, msgId : string) : void {
	console.log(TAG, "reportNotificationClick channel:" + channel + " msgId:" + msgId)
	JPushInterface.reportNotificationClick(channel, msgId)
}

export const setListWifi = function (enable : boolean) {
	JCollectControl.setListWifi(getContext(), enable);
}

export const setEnableAppTerminate = function (enable : boolean) {
	JCollectControl.setEnableAppTerminate(getContext(), enable);
}
/**
 * 更多插件开发的信息详见：https://uniapp.dcloud.net.cn/plugin/uts-plugin.html
 */